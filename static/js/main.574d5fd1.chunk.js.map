{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","todosWithUser","userId","todoId","usersFromServer","find","person","App","useState","setNewTitle","setNewId","userSelected","isUserSelected","titleCreated","isTitleCreated","maxTodoId","Math","max","action","method","onSubmit","event","preventDefault","newUser","push","addNewTodo","htmlFor","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.574d5fd1.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={email}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\n\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './components/types/User';\nimport { Todo } from './components/types/Todo';\n\nfunction findUser(todoId: number): User | null {\n  const user = usersFromServer.find(person => person.id === todoId);\n\n  return user || null;\n}\n\nconst todosWithUser: Todo[] = todosFromServer.map(todo => (\n  {\n    ...todo,\n    user: findUser(todo.userId),\n  }\n));\n\nexport const App = () => {\n  const [title, setNewTitle] = useState('');\n  const [userId, setNewId] = useState(0);\n  const [userSelected, isUserSelected] = useState(true);\n  const [titleCreated, isTitleCreated] = useState(true);\n\n  const maxTodoId = Math.max(...todosWithUser.map(todo => todo.id)) + 1;\n\n  const addNewTodo = (todoId: number) => {\n    const newUser = usersFromServer.find(user => user.id === todoId);\n\n    if (newUser && title) {\n      todosWithUser.push({\n        id: maxTodoId,\n        userId: todoId,\n        title,\n        completed: false,\n        user: newUser,\n      });\n\n      setNewTitle('');\n      setNewId(0);\n    }\n\n    if (!newUser) {\n      isUserSelected(false);\n    }\n\n    if (!title) {\n      isTitleCreated(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          addNewTodo(userId);\n        }}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"newTitle\">\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              id=\"newTitle\"\n              value={title}\n              placeholder=\"Enter a title\"\n              onChange={(event) => {\n                setNewTitle(event.target.value);\n                isTitleCreated(true);\n              }}\n            />\n          </label>\n          {!titleCreated && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"newUser\">\n            User:\n            <select\n              data-cy=\"userSelect\"\n              value={userId}\n              id=\"newUser\"\n              onChange={(event) => {\n                setNewId(+event.target.value);\n                isUserSelected(true);\n              }}\n            >\n              <option value=\"0\" disabled> Choose a user </option>\n              {usersFromServer.map((user) => (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {!userSelected && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todosWithUser} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}